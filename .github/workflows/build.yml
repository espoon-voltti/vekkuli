# SPDX-FileCopyrightText: 2024-2025 City of Espoo
#
# SPDX-License-Identifier: LGPL-2.1-or-later

name: Build
on:
  push:
  schedule:
    - cron: "0 2 * * 1" # At 02:00 on Monday

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: 730335326824.dkr.ecr.eu-north-1.amazonaws.com
  DOCKER_PULL: "${{ github.ref == 'refs/heads/master' && 'true' || 'false' }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }} # does not cancel master
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  lint-shell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: espoon-voltti/voltti-actions/shellcheck@master

  check-licenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Reuse Compliance Check
        uses: fsfe/reuse-action@v5

  cache-bust:
    runs-on: ubuntu-latest
    steps:
      - name: "Cache bust"
        id: cache-bust
        run: echo "cache-bust=$(date '+%Y-W%V')" >> "$GITHUB_OUTPUT"
    outputs:
      cache-bust: ${{ steps.cache-bust.outputs.cache-bust }}

  dockerize:
    needs:
      - cache-bust
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: vekkuli/frontend
            path: frontend
          - name: vekkuli/api-gateway
            path: api-gateway

    steps:
      - uses: actions/checkout@v4

      - name: Build image
        uses: espoon-voltti/voltti-actions/docker-build-push@master
        id: build
        with:
          path: ${{ matrix.path }}
          pull: ${{ env.DOCKER_PULL }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE }}
          AWS_REGION: ${{ env.AWS_REGION }}
          registry: ${{ env.ECR_REGISTRY }}
          name: ${{ matrix.name }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}

      - name: Build and run unit tests
        uses: espoon-voltti/voltti-actions/docker-build-push@master
        id: test
        with:
          push: false
          pull: ${{ env.DOCKER_PULL }}
          path: ${{ matrix.path }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE }}
          AWS_REGION: ${{ env.AWS_REGION }}
          registry: ${{ env.ECR_REGISTRY }}
          name: ${{ matrix.name }}-test
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}
          target: test

  service:
    needs:
      - cache-bust
    runs-on: ubuntu-latest
    env:
      name: vekkuli/service
      path: service
      builder: builder

    steps:
      - uses: actions/checkout@v4

      - name: Build image
        uses: espoon-voltti/voltti-actions/docker-build-push@master
        id: build
        with:
          path: ${{ env.path }}
          pull: ${{ env.DOCKER_PULL }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE }}
          AWS_REGION: ${{ env.AWS_REGION }}
          registry: ${{ env.ECR_REGISTRY }}
          name: ${{ env.name }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build builder and push to GHCR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: docker/build-push-action@v5
        id: builder
        with:
          context: ${{ env.path }}
          target: ${{ env.builder }}
          pull: ${{ env.DOCKER_PULL }}
          push: true
          tags: ghcr.io/espoon-voltti/${{ env.name }}-${{ env.builder }}:${{ github.sha }}
          build-args: |
            CACHE_BUST=${{ needs.cache-bust.outputs.cache-bust }}
            build=${{ github.run_number }}
            commit=${{ github.sha }}

    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}
      builder_image: ghcr.io/espoon-voltti/${{ env.name }}-${{ env.builder }}:${{ github.sha }}

  owasp:
    if: ${{ github.actor != 'dependabot[bot]' }}
    needs:
      - service
    runs-on: ubuntu-latest
    env:
      name: vekkuli/service
      path: service
      builder: builder

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache dependency check database
        uses: actions/cache@v4
        with:
          path: dependency-check-data
          key: dependency-check-data-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            dependency-check-data-

      - name: Run service OWASP tests
        shell: bash
        run: |
          docker run --rm \
              -e NVD_API_KEY=${{ secrets.NVD_API_KEY }} \
              -v $(pwd)/dependency-check-data:/root/.gradle/dependency-check-data \
              "${{ needs.service.outputs.builder_image }}" \
              sh -c "./gradlew --no-daemon dependencyCheckUpdate && ./gradlew --no-daemon dependencyCheckAnalyze"

      - name: Force caching dependency-check-data # If job fails cache is not saved without this
        uses: actions/cache/save@v4
        if: failure()
        with:
          path: dependency-check-data
          key: dependency-check-data-${{ github.run_id }}-${{ github.run_attempt }}

  test:
    runs-on: ubuntu-latest
    needs: service
    env:
      BUILD: "false"
      TAG: "${{ github.event.pull_request.head.sha || github.sha }}"

    defaults:
      run:
        working-directory: compose

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull images
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          ./test-compose pull

      - name: Build images
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          ./test-compose build --parallel

      - name: Run tests
        run: |
          set -o pipefail
          ./test-compose run service-tests | tee tests.log

      - name: Get logs
        if: always()
        run: |
          ./test-compose logs > tests-all.log

      - name: Store logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            compose/tests.log
            compose/tests-all.log
          retention-days: 2

  e2e-test:
    runs-on: ubuntu-latest
    needs:
      - service
      - dockerize
    env:
      BUILD: "false"
      TAG: "${{ github.event.pull_request.head.sha || github.sha }}"

    defaults:
      run:
        working-directory: compose

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull images
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          ./e2e-test-compose pull

      - name: Build images
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          ./e2e-test-compose build --parallel

      - name: Start dependencies
        run: |
          ./e2e-test-compose up -d vekkuli-db redis api-gateway

      - name: Run e2e tests
        run: |
          set -o pipefail
          ./e2e-test-compose up --exit-code-from service-e2e-tests service-e2e-tests | tee tests.log

      - name: Get e2e logs
        if: always()
        run: |
          ./e2e-test-compose logs > tests-all.log

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            compose/tests.log
            compose/tests-all.log
            compose/service-build/failure-screenshot.png
            compose/service-build/test-results/
          retention-days: 2

  integration-test:
    runs-on: ubuntu-latest
    needs:
      - service
    env:
      BUILD: "false"
      TAG: "${{ github.event.pull_request.head.sha || github.sha }}"

    defaults:
      run:
        working-directory: compose

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull images
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          ./integration-test-compose pull

      - name: Build images
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          ./integration-test-compose build --parallel

      - name: Run tests
        run: |
          set -o pipefail
          ./integration-test-compose run integration-test | tee integration-test.log

      - name: Get logs
        if: always()
        run: |
          ./integration-test-compose logs > integration-test-all.log

      - name: Store logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            compose/integration-test.log
            compose/integration-test-all.log
          retention-days: 2


  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs:
      - service
      - test
      - e2e-test
      - owasp
      - integration-test

    steps:
      - name: Cleanup untagged images
        uses: actions/delete-package-versions@v5
        with:
          package-name: vekkuli/service-builder
          package-type: container
          min-versions-to-keep: 0
          delete-only-untagged-versions: 'true'

      # delete-package-versions does not support deleting using tags so we just
      # keep X number of images where X is more than expected simultaneous CI jobs
      # Then we cleanup all images in sheduled.yml every night
      - name: Cleanup unnessary tagged image
        uses: actions/delete-package-versions@v5
        with:
          package-name: vekkuli/service-builder
          package-type: container
          min-versions-to-keep: 20

  deploy-environments:
    runs-on: ubuntu-latest
    steps:
      - name: Generate list of environments
        id: environments
        run: |
          echo 'environments=${{ github.ref == 'refs/heads/master' && '["dev","staging","prod"]' || '["staging","prod"]' }}' >> "$GITHUB_OUTPUT"
    outputs:
      environments: ${{ steps.environments.outputs.environments }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - service
      - dockerize
      - deploy-environments
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.deploy-environments.outputs.environments) }}

    environment:
      name: ${{ matrix.environment }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Retag
        run: |
          for repository in service api-gateway frontend; do
            MANIFEST=$(aws ecr batch-get-image --repository-name "vekkuli/$repository" --image-ids imageTag="${{ github.event.pull_request.head.sha || github.sha }}" --output json | jq --raw-output --join-output '.images[0].imageManifest')
            aws ecr put-image --repository-name "vekkuli/$repository" --image-tag "env-${{ matrix.environment }}" --image-manifest "$MANIFEST"
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ENVIRONMENT }}
          role-duration-seconds: 1200
          unset-current-credentials: true

      - name: Deploy
        run: |
          aws ecs update-service \
            --cluster "vekkuli-${{ matrix.environment }}" \
            --service "vekkuli-${{ matrix.environment }}" \
            --force-new-deployment
          aws ecs wait services-stable \
            --cluster "vekkuli-${{ matrix.environment }}" \
            --services "vekkuli-${{ matrix.environment }}"
